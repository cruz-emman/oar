// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum RequestType {
  TOR
  F9
  GTOR
  HD
  AV
  CAV
  CCD
  CDL
  CENR
  CG
  CGWA
  CMI
  DIP
  ICARD
  RR
  SSP
  SV
}

model User {
  id            String    @id
  email         String
  emailVerified Boolean
  image         String?   @db.Text
  createdAt     DateTime
  updatedAt     DateTime
  sessions      Session[]
  accounts      Account[]

  @@unique([email])
  @@map("user")
}

model Session {
  id        String   @id
  expiresAt DateTime
  token     String
  createdAt DateTime
  updatedAt DateTime
  ipAddress String?  @db.Text
  userAgent String?  @db.Text
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([token])
  @@map("session")
}

model Account {
  id                    String    @id
  accountId             String    @db.Text
  providerId            String    @db.Text
  userId                String
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken           String?   @db.Text
  refreshToken          String?   @db.Text
  idToken               String?   @db.Text
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?   @db.Text
  password              String?   @db.Text
  createdAt             DateTime
  updatedAt             DateTime

  @@map("account")
}

model Verification {
  id         String    @id
  identifier String    @db.Text
  value      String    @db.Text
  expiresAt  DateTime
  createdAt  DateTime?
  updatedAt  DateTime?

  @@map("verification")
}

//STUDENT SIDE
model Student {
  id            String  @id @default(cuid())
  studentNumber String  @unique
  first_name    String
  middle_name   String?
  last_name     String?
  college       String?

  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt()
  requestForm RequestForm[]
}

model RequestForm {
  id String @id @default(cuid())

  request       RequestType
  date_request  String
  due_date      String?
  date_printed  String?
  date_checked  String?
  date_approved String?
  remarks       String?
  copies        Int         @default(1)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt()

  studentUser String
  studentId   Student @relation(fields: [studentUser], references: [id], onDelete: Cascade)
}
